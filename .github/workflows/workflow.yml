name: learn-github-actions

on: 
  push:
    branches: 
      - main
    paths: 
      - 'deploy/**'
  workflow_dispatch:
    
env: 
    AZURE_RESOURCEGROUP_NAME: ToyWebsiteTest
    ENVIRONMENT_TYPE: Test

jobs:
#  lint: 
#     runs-on: ubuntu-latest
#     steps: 
#     - uses: actions/checkout@v2
#     - name: 'Lint Bicep template'
#       run: az bicep build --file deploy/main.bicep
  
#  validate: 
#     runs-on: ubuntu-latest
#     steps: 
#     - uses: actions/checkout@v2
#     - uses: azure/login@v1
#       with:
#         creds: ${{ secrets.AZURE_CREDENTIALS }}    
#     - uses: azure/arm-deploy@v1
#       with:
#         deploymentName: ${{ github.run_number }}
#         resourceGroupName: ${{ env.AZURE_RESOURCEGROUP_NAME }}
#         template: ./deploy/main.bicep
#         parameters: environmentType=${{ env.ENVIRONMENT_TYPE }}
#         deploymentMode: Validate
        
#  review: 
#     runs-on: ubuntu-latest
#     needs: [lint, validate]
#     steps: 
#     - uses: actions/checkout@v2
#     - uses: azure/login@v1
#       with:
#         creds: ${{ secrets.AZURE_CREDENTIALS }}    
#     - uses: Azure/cli@v1
#       name: Run what-if
#       with:
#         # Specify the script here
#         inlineScript: |
#             az deployment group what-if \
#               --resource-group ${{ env.AZURE_RESOURCEGROUP_NAME }} \
#               --template-file deploy/main.bicep \
#               --parameters environmentType=${{ env.ENVIRONMENT_TYPE }}
 
  deploy:
    runs-on: ubuntu-latest
    environment: Website
#    needs: review
    outputs:
      appServiceAppHostName: ${{ steps.Deploy.outputs.appServiceAppHostName }}
    steps:
    - uses: actions/checkout@v2
#    - uses: azure/login@v1
#      with:
#        creds: ${{ secrets.AZURE_CREDENTIALS }}
#    - uses: azure/arm-deploy@v1
#      with:
#        deploymentName: ${{ github.run_number }}
#        resourceGroupName: ${{ env.AZURE_RESOURCEGROUP_NAME }}
#        template: ./deploy/main.bicep
#        parameters: environmentType=${{ env.ENVIRONMENT_TYPE }}
    - run: |
         echo "::set-output name=appServiceAppHostName::blah"
#    - uses: Azure/cli@v1
#      name: Deploy
#      with:
#        inlineScript: |
#            deploymentOutput=$(az deployment group create \
#                    --name ${{ github.run_number }} \
#                    --resource-group ${{ env.AZURE_RESOURCEGROUP_NAME }} \
#                    --template-file deploy/main.bicep \
#                    --parameters environmentType=${{ env.ENVIRONMENT_TYPE }})
#            appServiceAppHostName=$(echo $deploymentOutput | jq -r '.properties.outputs.appServiceAppHostName.value')
#            echo "hostname: $appServiceAppHostName"
#            echo "::set-output name=appServiceAppHostName::$appServiceAppHostName"

#    - uses: Azure/cli@1.0.4
#      name: Get output
#      with:
#        inlineScript: |
#            az deployment group show \
#                  --resource-group ${{ env.AZURE_RESOURCEGROUP_NAME }} \
#                  --name ${{ github.run_number }} \
#                  --query properties.outputs.appServiceAppHostName.value -o tsv > hostname.txt
#    - name: Upload hostname
#      uses: actions/upload-artifact@v2
#      with:
#        name: hostname
#        path: hostname.json    

  smoke-test:
    runs-on: ubuntu-latest
    needs: deploy
    steps: 
    - uses: actions/checkout@v2
#    - name: Download hostname
#      uses: actions/download-artifact@v2
#      with:
#        name: hostname
    - uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: true 
    - run: |
        echo "test"
        echo "hostname: ${{needs.deploy.outputs.appServiceAppHostName}}"
        $container = New-PesterContainer `
          -Path 'deploy/Website.Tests.ps1' `
          -Data @{ HostName = ${{needs.deploy.outputs.appServiceAppHostName}} }
        Invoke-Pester `
          -Container $container `
          -CI
      shell: pwsh
